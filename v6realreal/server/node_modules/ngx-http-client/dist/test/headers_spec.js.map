{"version":3,"file":"headers_spec.js","sourceRoot":"","sources":["../../test/headers_spec.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpHeaders} from '../src/headers';\n\nexport function main() {\n  describe('HttpHeaders', () => {\n\n    describe('initialization', () => {\n      it('should conform to spec', () => {\n        const httpHeaders = {\n          'Content-Type': 'image/jpeg',\n          'Accept-Charset': 'utf-8',\n          'X-My-Custom-Header': 'Zeke are cool',\n        };\n        const secondHeaders = new HttpHeaders(httpHeaders);\n        expect(secondHeaders.get('Content-Type')).toEqual('image/jpeg');\n      });\n\n      it('should merge values in provided dictionary', () => {\n        const headers = new HttpHeaders({'foo': 'bar'});\n        expect(headers.get('foo')).toEqual('bar');\n        expect(headers.getAll('foo')).toEqual(['bar']);\n      });\n\n      it('should lazily append values', () => {\n        const src = new HttpHeaders();\n        const a = src.append('foo', 'a');\n        const b = a.append('foo', 'b');\n        const c = b.append('foo', 'c');\n        expect(src.getAll('foo')).toBeNull();\n        expect(a.getAll('foo')).toEqual(['a']);\n        expect(b.getAll('foo')).toEqual(['a', 'b']);\n        expect(c.getAll('foo')).toEqual(['a', 'b', 'c']);\n      });\n\n      it('should keep the last value when initialized from an object', () => {\n        const headers = new HttpHeaders({\n          'foo': 'first',\n          'fOo': 'second',\n        });\n\n        expect(headers.getAll('foo')).toEqual(['second']);\n      });\n    });\n\n    describe('.set()', () => {\n      it('should clear all values and re-set for the provided key', () => {\n        const headers = new HttpHeaders({'foo': 'bar'});\n        expect(headers.get('foo')).toEqual('bar');\n\n        const second = headers.set('foo', 'baz');\n        expect(second.get('foo')).toEqual('baz');\n\n        const third = headers.set('fOO', 'bat');\n        expect(third.get('foo')).toEqual('bat');\n      });\n\n      it('should preserve the case of the first call', () => {\n        const headers = new HttpHeaders();\n        const second = headers.set('fOo', 'baz');\n        const third = second.set('foo', 'bat');\n        expect(third.keys()).toEqual(['fOo']);\n      });\n    });\n\n    describe('.get()', () => {\n      it('should be case insensitive', () => {\n        const headers = new HttpHeaders({'foo': 'baz'});\n        expect(headers.get('foo')).toEqual('baz');\n        expect(headers.get('FOO')).toEqual('baz');\n      });\n\n      it('should return null if the header is not present', () => {\n        const headers = new HttpHeaders({bar: []});\n        expect(headers.get('bar')).toEqual(null);\n        expect(headers.get('foo')).toEqual(null);\n      });\n    });\n\n    describe('.getAll()', () => {\n      it('should be case insensitive', () => {\n        const headers = new HttpHeaders({foo: ['bar', 'baz']});\n        expect(headers.getAll('foo')).toEqual(['bar', 'baz']);\n        expect(headers.getAll('FOO')).toEqual(['bar', 'baz']);\n      });\n\n      it('should return null if the header is not present', () => {\n        const headers = new HttpHeaders();\n        expect(headers.getAll('foo')).toEqual(null);\n      });\n    });\n\n    describe('.delete', () => {\n      it('should be case insensitive', () => {\n        const headers = new HttpHeaders({'foo': 'baz'});\n        expect(headers.has('foo')).toEqual(true);\n        const second = headers.delete('foo');\n        expect(second.has('foo')).toEqual(false);\n\n        const third = second.set('foo', 'baz');\n        expect(third.has('foo')).toEqual(true);\n        const fourth = third.delete('FOO');\n        expect(fourth.has('foo')).toEqual(false);\n      });\n    });\n\n    describe('.append', () => {\n      it('should append a value to the list', () => {\n        const headers = new HttpHeaders();\n        const second = headers.append('foo', 'bar');\n        const third = second.append('foo', 'baz');\n        expect(third.get('foo')).toEqual('bar');\n        expect(third.getAll('foo')).toEqual(['bar', 'baz']);\n      });\n\n      it('should preserve the case of the first call', () => {\n        const headers = new HttpHeaders();\n        const second = headers.append('FOO', 'bar');\n        const third = second.append('foo', 'baz');\n        expect(third.keys()).toEqual(['FOO']);\n      });\n    });\n\n    describe('response header strings', () => {\n      it('should be parsed by the constructor', () => {\n        const response = `Date: Fri, 20 Nov 2015 01:45:26 GMT\\n` +\n            `Content-Type: application/json; charset=utf-8\\n` +\n            `Transfer-Encoding: chunked\\n` +\n            `Connection: keep-alive`;\n        const headers = new HttpHeaders(response);\n        expect(headers.get('Date')).toEqual('Fri, 20 Nov 2015 01:45:26 GMT');\n        expect(headers.get('Content-Type')).toEqual('application/json; charset=utf-8');\n        expect(headers.get('Transfer-Encoding')).toEqual('chunked');\n        expect(headers.get('Connection')).toEqual('keep-alive');\n      });\n    });\n  });\n}\n"]}