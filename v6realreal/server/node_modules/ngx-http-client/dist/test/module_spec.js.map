{"version":3,"file":"module_spec.js","sourceRoot":"","sources":["../../test/module_spec.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.JsonpCallbackContext\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport 'rxjs/add/operator/map';\n\nimport {Injector} from '@angular/core';\nimport {TestBed} from '@angular/core/testing';\nimport {Observable} from 'rxjs/Observable';\n\nimport {HttpHandler} from '../src/backend';\nimport {HttpClient} from '../src/client';\nimport {HTTP_INTERCEPTORS, HttpInterceptor} from '../src/interceptor';\nimport {HttpRequest} from '../src/request';\nimport {HttpEvent, HttpResponse} from '../src/response';\nimport {HttpTestingController} from '../testing/src/api';\nimport {HttpClientTestingModule} from '../testing/src/module';\nimport {TestRequest} from '../testing/src/request';\n\nclass TestInterceptor implements HttpInterceptor {\n  constructor(private value: string) {}\n\n  intercept(req: HttpRequest<any>, delegate: HttpHandler): Observable<HttpEvent<any>> {\n    const existing = req.headers.get('Intercepted');\n    const next = !!existing ? existing + ',' + this.value : this.value;\n    req = req.clone({setHeaders: {'Intercepted': next}});\n    return delegate.handle(req).map(event => {\n      if (event instanceof HttpResponse) {\n        const existing = event.headers.get('Intercepted');\n        const next = !!existing ? existing + ',' + this.value : this.value;\n        return event.clone({headers: event.headers.set('Intercepted', next)});\n      }\n      return event;\n    });\n  }\n}\n\nclass InterceptorA extends TestInterceptor {\n  constructor() { super('A'); }\n}\n\nclass InterceptorB extends TestInterceptor {\n  constructor() { super('B'); }\n}\n\nexport function main() {\n  describe('HttpClientModule', () => {\n    let injector: Injector;\n    beforeEach(() => {\n      injector = TestBed.configureTestingModule({\n        imports: [HttpClientTestingModule],\n        providers: [\n          {provide: HTTP_INTERCEPTORS, useClass: InterceptorA, multi: true},\n          {provide: HTTP_INTERCEPTORS, useClass: InterceptorB, multi: true},\n        ],\n      });\n    });\n    it('initializes HttpClient properly', (done: DoneFn) => {\n      injector.get(HttpClient).get('/test', {responseType: 'text'}).subscribe(value => {\n        expect(value).toBe('ok!');\n        done();\n      });\n      injector.get(HttpTestingController).expectOne('/test').flush('ok!');\n    });\n    it('intercepts outbound responses in the order in which interceptors were bound',\n       (done: DoneFn) => {\n         injector.get(HttpClient)\n             .get('/test', {observe: 'response', responseType: 'text'})\n             .subscribe(value => done());\n         const req = injector.get(HttpTestingController).expectOne('/test') as TestRequest;\n         expect(req.request.headers.get('Intercepted')).toEqual('A,B');\n         req.flush('ok!');\n       });\n    it('intercepts inbound responses in the right (reverse binding) order', (done: DoneFn) => {\n      injector.get(HttpClient)\n          .get('/test', {observe: 'response', responseType: 'text'})\n          .subscribe(value => {\n            expect(value.headers.get('Intercepted')).toEqual('B,A');\n            done();\n          });\n      injector.get(HttpTestingController).expectOne('/test').flush('ok!');\n    });\n  });\n}\n"]}