/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { HttpParams } from '../src/params';
export function main() {
    describe('HttpUrlEncodedParams', function () {
        describe('initialization', function () {
            it('should be empty at construction', function () {
                var body = new HttpParams();
                expect(body.toString()).toEqual('');
            });
            it('should parse an existing url', function () {
                var body = new HttpParams({ fromString: 'a=b&c=d&c=e' });
                expect(body.getAll('a')).toEqual(['b']);
                expect(body.getAll('c')).toEqual(['d', 'e']);
            });
        });
        describe('lazy mutation', function () {
            it('should allow setting parameters', function () {
                var body = new HttpParams({ fromString: 'a=b' });
                var mutated = body.set('a', 'c');
                expect(mutated.toString()).toEqual('a=c');
            });
            it('should allow appending parameters', function () {
                var body = new HttpParams({ fromString: 'a=b' });
                var mutated = body.append('a', 'c');
                expect(mutated.toString()).toEqual('a=b&a=c');
            });
            it('should allow deletion of parameters', function () {
                var body = new HttpParams({ fromString: 'a=b&c=d&e=f' });
                var mutated = body.delete('c');
                expect(mutated.toString()).toEqual('a=b&e=f');
            });
            it('should allow chaining of mutations', function () {
                var body = new HttpParams({ fromString: 'a=b&c=d&e=f' });
                var mutated = body.append('e', 'y').delete('c').set('a', 'x').append('e', 'z');
                expect(mutated.toString()).toEqual('a=x&e=f&e=y&e=z');
            });
            it('should allow deletion of one value of a parameter', function () {
                var body = new HttpParams({ fromString: 'a=1&a=2&a=3&a=4&a=5' });
                var mutated = body.delete('a', '2').delete('a', '4');
                expect(mutated.getAll('a')).toEqual(['1', '3', '5']);
            });
        });
        describe('read operations', function () {
            it('should give null if parameter is not set', function () {
                var body = new HttpParams({ fromString: 'a=b&c=d' });
                expect(body.get('e')).toBeNull();
                expect(body.getAll('e')).toBeNull();
            });
            it('should give an accurate list of keys', function () {
                var body = new HttpParams({ fromString: 'a=1&b=2&c=3&d=4' });
                expect(body.keys()).toEqual(['a', 'b', 'c', 'd']);
            });
        });
    });
}
//# sourceMappingURL=params_spec.js.map