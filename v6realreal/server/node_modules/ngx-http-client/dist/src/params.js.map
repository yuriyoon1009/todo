{"version":3,"file":"params.js","sourceRoot":"","sources":["../../src/params.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAeA;;;;;EAKA;AACH;IAAA;IAQA,CAAC;IAPC,2CAAS,GAAT,UAAU,CAAS,IAAY,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAE5D,6CAAW,GAAX,UAAY,CAAS,IAAY,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAE9D,2CAAS,GAAT,UAAU,CAAS,IAAY,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAE9D,6CAAW,GAAX,UAAY,CAAS,IAAI,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1D,8BAAC;AAAD,CAAC,AARD,IAQC;;AAED,0BAA0B,CAAS;IACjC,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC;IACzB,yBAAyB;IACzB,yBAAyB;IACzB,yBAAyB;IACzB,yBAAyB;IACzB,yBAAyB;IACzB,yBAAyB;IACzB,yBAAyB;IACzB,yBAAyB;IACzB,0BAA0B;AAChC,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A codec for encoding and decoding parameters in URLs.\n *\n * Used by `HttpParams`.\n *\n * @stable\n **/\n\n import { \n   HttpParameterCodec,\n   HttpUrlEncodingCodec,\n   } from '@angular/common/http';\n\n   /**\n * A `HttpParameterCodec` that uses `encodeURIComponent` and `decodeURIComponent` to\n * serialize and parse URL parameter keys and values.\n *\n * @stable\n */\nexport class WebHttpUrlEncodingCodec implements HttpParameterCodec {\n  encodeKey(k: string): string { return standardEncoding(k); }\n\n  encodeValue(v: string): string { return standardEncoding(v); }\n\n  decodeKey(k: string): string { return decodeURIComponent(k); }\n\n  decodeValue(v: string) { return decodeURIComponent(v); }\n}\n\nfunction standardEncoding(v: string): string {\n  return encodeURIComponent(v);\n      // .replace(/%40/gi, '@')\n      // .replace(/%3A/gi, ':')\n      // .replace(/%24/gi, '$')\n      // .replace(/%2C/gi, ',')\n      // .replace(/%3B/gi, ';')\n      // .replace(/%2B/gi, '+')\n      // .replace(/%3D/gi, '=')\n      // .replace(/%3F/gi, '?')\n      // .replace(/%2F/gi, '/');\n}\n/** Options used to construct an `HttpParams` instance. */\nexport interface HttpParamsOptions {\n  /**\n   * String representation of the HTTP params in URL-query-string format. Mutually exclusive with\n   * `fromObject`.\n   */\n  fromString?: string;\n  /** Object map of the HTTP params. Mutally exclusive with `fromString`. */\n  fromObject?: {\n      [param: string]: string | string[];\n  };\n  /** Encoding codec used to parse and serialize the params. */\n  encoder?: HttpParameterCodec;\n}\n"]}