/**
 * @license
 * Copyright Google Inc. All Rights Reserved.JsonpCallbackContext
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import { describe, it } from '@angular/core/testing/src/testing_internal';
import { JSONP_ERR_NO_CALLBACK, JSONP_ERR_WRONG_METHOD, JSONP_ERR_WRONG_RESPONSE_TYPE, JsonpClientBackend } from '../src/jsonp';
import { HttpRequest } from '../src/request';
import { HttpEventType } from '../src/response';
import { MockDocument } from './jsonp_mock';
function runOnlyCallback(home, data) {
    var keys = Object.keys(home);
    expect(keys.length).toBe(1);
    var callback = home[keys[0]];
    delete home[keys[0]];
    callback(data);
}
var SAMPLE_REQ = new HttpRequest('JSONP', '/test');
export function main() {
    describe('JsonpClientBackend', function () {
        var home = {};
        var document;
        var backend;
        beforeEach(function () {
            home = {};
            document = new MockDocument();
            backend = new JsonpClientBackend(home, document);
        });
        it('handles a basic request', function (done) {
            backend.handle(SAMPLE_REQ).toArray().subscribe(function (events) {
                expect(events.map(function (event) { return event.type; })).toEqual([
                    HttpEventType.Sent,
                    HttpEventType.Response,
                ]);
                done();
            });
            runOnlyCallback(home, { data: 'This is a test' });
            document.mockLoad();
        });
        it('handles an error response properly', function (done) {
            var error = new Error('This is a test error');
            backend.handle(SAMPLE_REQ).toArray().subscribe(undefined, function (err) {
                expect(err.status).toBe(0);
                expect(err.error).toBe(error);
                done();
            });
            document.mockError(error);
        });
        describe('throws an error', function () {
            it('when request method is not JSONP', function () { return expect(function () { return backend.handle(SAMPLE_REQ.clone({ method: 'GET' })); })
                .toThrowError(JSONP_ERR_WRONG_METHOD); });
            it('when response type is not json', function () { return expect(function () { return backend.handle(SAMPLE_REQ.clone({ responseType: 'text' })); })
                .toThrowError(JSONP_ERR_WRONG_RESPONSE_TYPE); });
            it('when callback is never called', function (done) {
                backend.handle(SAMPLE_REQ).subscribe(undefined, function (err) {
                    expect(err.status).toBe(0);
                    expect(err.error instanceof Error).toEqual(true);
                    expect(err.error.message).toEqual(JSONP_ERR_NO_CALLBACK);
                    done();
                });
                document.mockLoad();
            });
        });
    });
}
//# sourceMappingURL=jsonp_spec.js.map