{"version":3,"file":"response_spec.js","sourceRoot":"","sources":["../../test/response_spec.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ddescribe, describe, it} from '@angular/core/testing/src/testing_internal';\n\nimport {HttpHeaders} from '../src/headers';\nimport {HttpResponse} from '../src/response';\n\nexport function main() {\n  describe('HttpResponse', () => {\n    describe('constructor()', () => {\n      it('fully constructs responses', () => {\n        const resp = new HttpResponse({\n          body: 'test body',\n          headers: new HttpHeaders({\n            'Test': 'Test header',\n          }),\n          status: 201,\n          statusText: 'Created',\n          url: '/test',\n        });\n        expect(resp.body).toBe('test body');\n        expect(resp.headers instanceof HttpHeaders).toBeTruthy();\n        expect(resp.headers.get('Test')).toBe('Test header');\n        expect(resp.status).toBe(201);\n        expect(resp.statusText).toBe('Created');\n        expect(resp.url).toBe('/test');\n      });\n      it('uses defaults if no args passed', () => {\n        const resp = new HttpResponse({});\n        expect(resp.headers).not.toBeNull();\n        expect(resp.status).toBe(200);\n        expect(resp.statusText).toBe('OK');\n        expect(resp.body).toBeNull();\n        expect(resp.ok).toBeTruthy();\n        expect(resp.url).toBeNull();\n      });\n    });\n    it('.ok is determined by status', () => {\n      const good = new HttpResponse({status: 200});\n      const alsoGood = new HttpResponse({status: 299});\n      const badHigh = new HttpResponse({status: 300});\n      const badLow = new HttpResponse({status: 199});\n      expect(good.ok).toBe(true);\n      expect(alsoGood.ok).toBe(true);\n      expect(badHigh.ok).toBe(false);\n      expect(badLow.ok).toBe(false);\n    });\n    describe('.clone()', () => {\n      it('copies the original when given no arguments', () => {\n        const clone =\n            new HttpResponse({body: 'test', status: 201, statusText: 'created', url: '/test'})\n                .clone();\n        expect(clone.body).toBe('test');\n        expect(clone.status).toBe(201);\n        expect(clone.statusText).toBe('created');\n        expect(clone.url).toBe('/test');\n        expect(clone.headers).not.toBeNull();\n      });\n      it('overrides the original', () => {\n        const orig =\n            new HttpResponse({body: 'test', status: 201, statusText: 'created', url: '/test'});\n        const clone =\n            orig.clone({body: {data: 'test'}, status: 200, statusText: 'Okay', url: '/bar'});\n        expect(clone.body).toEqual({data: 'test'});\n        expect(clone.status).toBe(200);\n        expect(clone.statusText).toBe('Okay');\n        expect(clone.url).toBe('/bar');\n        expect(clone.headers).toBe(orig.headers);\n      });\n    });\n  });\n}"]}