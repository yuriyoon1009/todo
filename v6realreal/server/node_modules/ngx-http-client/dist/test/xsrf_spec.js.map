{"version":3,"file":"xsrf_spec.js","sourceRoot":"","sources":["../../test/xsrf_spec.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpHandler} from '../src/backend';\nimport {HttpHeaders} from '../src/headers';\nimport {HttpRequest} from '../src/request';\nimport {HttpXsrfCookieExtractor, HttpXsrfInterceptor} from '../src/xsrf';\n\nimport {HttpClientTestingBackend} from '../testing/src/backend';\n\nclass SampleTokenExtractor {\n  constructor(private token: string|null) {}\n\n  getToken(): string|null { return this.token; }\n}\n\nexport function main() {\n  describe('HttpXsrfInterceptor', () => {\n    let backend: HttpClientTestingBackend;\n    const interceptor = new HttpXsrfInterceptor(new SampleTokenExtractor('test'), 'X-XSRF-TOKEN');\n    beforeEach(() => { backend = new HttpClientTestingBackend(); });\n    it('applies XSRF protection to outgoing requests', () => {\n      interceptor.intercept(new HttpRequest('POST', '/test', {}), backend).subscribe();\n      const req = backend.expectOne('/test');\n      expect(req.request.headers.get('X-XSRF-TOKEN')).toEqual('test');\n      req.flush({});\n    });\n    it('does not apply XSRF protection when request is a GET', () => {\n      interceptor.intercept(new HttpRequest('GET', '/test'), backend).subscribe();\n      const req = backend.expectOne('/test');\n      expect(req.request.headers.has('X-XSRF-TOKEN')).toEqual(false);\n      req.flush({});\n    });\n    it('does not apply XSRF protection when request is a HEAD', () => {\n      interceptor.intercept(new HttpRequest('HEAD', '/test'), backend).subscribe();\n      const req = backend.expectOne('/test');\n      expect(req.request.headers.has('X-XSRF-TOKEN')).toEqual(false);\n      req.flush({});\n    });\n    it('does not overwrite existing header', () => {\n      interceptor\n          .intercept(\n              new HttpRequest(\n                  'POST', '/test', {}, {headers: new HttpHeaders().set('X-XSRF-TOKEN', 'blah')}),\n              backend)\n          .subscribe();\n      const req = backend.expectOne('/test');\n      expect(req.request.headers.get('X-XSRF-TOKEN')).toEqual('blah');\n      req.flush({});\n    });\n    it('does not set the header for a null token', () => {\n      const interceptor = new HttpXsrfInterceptor(new SampleTokenExtractor(null), 'X-XSRF-TOKEN');\n      interceptor.intercept(new HttpRequest('POST', '/test', {}), backend).subscribe();\n      const req = backend.expectOne('/test');\n      expect(req.request.headers.has('X-XSRF-TOKEN')).toEqual(false);\n      req.flush({});\n    });\n    afterEach(() => { backend.verify(); });\n  });\n  describe('HttpXsrfCookieExtractor', () => {\n    let document: {[key: string]: string};\n    let extractor: HttpXsrfCookieExtractor;\n    beforeEach(() => {\n      document = {\n        cookie: 'XSRF-TOKEN=test',\n      };\n      extractor = new HttpXsrfCookieExtractor(document, 'browser', 'XSRF-TOKEN');\n    });\n    it('parses the cookie from document.cookie',\n       () => { expect(extractor.getToken()).toEqual('test'); });\n    it('does not re-parse if document.cookie has not changed', () => {\n      expect(extractor.getToken()).toEqual('test');\n      expect(extractor.getToken()).toEqual('test');\n      expect(extractor.parseCount).toEqual(1);\n    });\n    it('re-parses if document.cookie changes', () => {\n      expect(extractor.getToken()).toEqual('test');\n      document['cookie'] = 'XSRF-TOKEN=blah';\n      expect(extractor.getToken()).toEqual('blah');\n      expect(extractor.parseCount).toEqual(2);\n    });\n  });\n}\n"]}