/**
 * @license
 * Copyright Google Inc. All Rights Reserved.
 *
 * Use of this source code is governed by an MIT-style license that can be
 * found in the LICENSE file at https://angular.io/license
 */
import 'rxjs/add/operator/toArray';
import 'rxjs/add/operator/toPromise';
import { describe, it } from '@angular/core/testing/src/testing_internal';
import { HttpClient } from '../src/client';
import { HttpEventType, HttpResponse } from '../src/response';
import { HttpClientTestingBackend } from '../testing/src/backend';
export function main() {
    describe('HttpClient', function () {
        var client = null;
        var backend = null;
        beforeEach(function () {
            backend = new HttpClientTestingBackend();
            client = new HttpClient(backend);
        });
        afterEach(function () { backend.verify(); });
        describe('makes a basic request', function () {
            it('for JSON data', function (done) {
                client.get('/test').subscribe(function (res) {
                    expect(res['data']).toEqual('hello world');
                    done();
                });
                backend.expectOne('/test').flush({ 'data': 'hello world' });
            });
            it('for text data', function (done) {
                client.get('/test', { responseType: 'text' }).subscribe(function (res) {
                    expect(res).toEqual('hello world');
                    done();
                });
                backend.expectOne('/test').flush('hello world');
            });
            it('with headers', function (done) {
                client.get('/test', { headers: { 'X-Option': 'true' } }).subscribe(function () { return done(); });
                var req = backend.expectOne('/test');
                expect(req.request.headers.get('X-Option')).toEqual('true');
                req.flush({});
            });
            it('with params', function (done) {
                client.get('/test', { params: { 'test': 'true' } }).subscribe(function () { return done(); });
                backend.expectOne('/test?test=true').flush({});
            });
            it('for an arraybuffer', function (done) {
                var body = new ArrayBuffer(4);
                client.get('/test', { responseType: 'arraybuffer' }).subscribe(function (res) {
                    expect(res).toBe(body);
                    done();
                });
                backend.expectOne('/test').flush(body);
            });
            if (typeof Blob !== 'undefined') {
                it('for a blob', function (done) {
                    var body = new Blob([new ArrayBuffer(4)]);
                    client.get('/test', { responseType: 'blob' }).subscribe(function (res) {
                        expect(res).toBe(body);
                        done();
                    });
                    backend.expectOne('/test').flush(body);
                });
            }
            it('that returns a response', function (done) {
                var body = { 'data': 'hello world' };
                client.get('/test', { observe: 'response' }).subscribe(function (res) {
                    expect(res instanceof HttpResponse).toBe(true);
                    expect(res.body).toBe(body);
                    done();
                });
                backend.expectOne('/test').flush(body);
            });
            it('that returns a stream of events', function (done) {
                client.get('/test', { observe: 'events' }).toArray().toPromise().then(function (events) {
                    expect(events.length).toBe(2);
                    var x = HttpResponse;
                    expect(events[0].type).toBe(HttpEventType.Sent);
                    expect(events[1].type).toBe(HttpEventType.Response);
                    expect(events[1] instanceof HttpResponse).toBeTruthy();
                    done();
                });
                backend.expectOne('/test').flush({ 'data': 'hello world' });
            });
            it('with progress events enabled', function (done) {
                client.get('/test', { reportProgress: true }).subscribe(function () { return done(); });
                var req = backend.expectOne('/test');
                expect(req.request.reportProgress).toEqual(true);
                req.flush({});
            });
        });
        describe('makes a POST request', function () {
            it('with text data', function (done) {
                client.post('/test', 'text body', { observe: 'response', responseType: 'text' })
                    .subscribe(function (res) {
                    expect(res.ok).toBeTruthy();
                    expect(res.status).toBe(200);
                    done();
                });
                backend.expectOne('/test').flush('hello world');
            });
            it('with json data', function (done) {
                var body = { data: 'json body' };
                client.post('/test', body, { observe: 'response', responseType: 'text' }).subscribe(function (res) {
                    expect(res.ok).toBeTruthy();
                    expect(res.status).toBe(200);
                    done();
                });
                var testReq = backend.expectOne('/test');
                expect(testReq.request.body).toBe(body);
                testReq.flush('hello world');
            });
            it('with an arraybuffer', function (done) {
                var body = new ArrayBuffer(4);
                client.post('/test', body, { observe: 'response', responseType: 'text' }).subscribe(function (res) {
                    expect(res.ok).toBeTruthy();
                    expect(res.status).toBe(200);
                    done();
                });
                var testReq = backend.expectOne('/test');
                expect(testReq.request.body).toBe(body);
                testReq.flush('hello world');
            });
        });
        describe('makes a JSONP request', function () {
            it('with properly set method and callback', function (done) {
                client.jsonp('/test', 'myCallback').subscribe(function () { return done(); });
                backend.expectOne({ method: 'JSONP', url: '/test?myCallback=JSONP_CALLBACK' })
                    .flush('hello world');
            });
        });
        describe('makes a request for an error response', function () {
            it('with a JSON body', function (done) {
                client.get('/test').subscribe(function () { }, function (res) {
                    expect(res.error.data).toEqual('hello world');
                    done();
                });
                backend.expectOne('/test').flush({ 'data': 'hello world' }, { status: 500, statusText: 'Server error' });
            });
        });
    });
}
//# sourceMappingURL=client_spec.js.map