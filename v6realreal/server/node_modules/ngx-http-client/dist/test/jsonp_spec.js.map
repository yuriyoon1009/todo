{"version":3,"file":"jsonp_spec.js","sourceRoot":"","sources":["../../test/jsonp_spec.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAY,QAAQ,EAAE,EAAE,EAAC,MAAM,4CAA4C,CAAC;AAEnF,OAAO,EAAC,qBAAqB,EAAE,sBAAsB,EAAE,6BAA6B,EAAE,kBAAkB,EAAC,MAAM,cAAc,CAAC;AAC9H,OAAO,EAAC,WAAW,EAAC,MAAM,gBAAgB,CAAC;AAC3C,OAAO,EAAoB,aAAa,EAAC,MAAM,iBAAiB,CAAC;AAEjE,OAAO,EAAC,YAAY,EAAC,MAAM,cAAc,CAAC;AAE1C,yBAAyB,IAAS,EAAE,IAAY;IAC9C,IAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC/B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC5B,IAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IAC/B,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;IACrB,QAAQ,CAAC,IAAI,CAAC,CAAC;AACjB,CAAC;AAED,IAAM,UAAU,GAAG,IAAI,WAAW,CAAQ,OAAO,EAAE,OAAO,CAAC,CAAC;AAE5D,MAAM;IACJ,QAAQ,CAAC,oBAAoB,EAAE;QAC7B,IAAI,IAAI,GAAG,EAAE,CAAC;QACd,IAAI,QAAsB,CAAC;QAC3B,IAAI,OAA2B,CAAC;QAChC,UAAU,CAAC;YACT,IAAI,GAAG,EAAE,CAAC;YACV,QAAQ,GAAG,IAAI,YAAY,EAAE,CAAC;YAC9B,OAAO,GAAG,IAAI,kBAAkB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,yBAAyB,EAAE,UAAC,IAAY;YACzC,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,UAAA,MAAM;gBACnD,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,UAAA,KAAK,IAAI,OAAA,KAAK,CAAC,IAAI,EAAV,CAAU,CAAC,CAAC,CAAC,OAAO,CAAC;oBAC9C,aAAa,CAAC,IAAI;oBAClB,aAAa,CAAC,QAAQ;iBACvB,CAAC,CAAC;gBACH,IAAI,EAAE,CAAC;YACT,CAAC,CAAC,CAAC;YACH,eAAe,CAAC,IAAI,EAAE,EAAC,IAAI,EAAE,gBAAgB,EAAC,CAAC,CAAC;YAChD,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACtB,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,oCAAoC,EAAE,UAAC,IAAY;YACpD,IAAM,KAAK,GAAG,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;YAChD,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,SAAS,EAAE,UAAC,GAAsB;gBAC/E,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBAC3B,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC9B,IAAI,EAAE,CAAC;YACT,CAAC,CAAC,CAAC;YACH,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;QACH,QAAQ,CAAC,iBAAiB,EAAE;YAC1B,EAAE,CAAC,kCAAkC,EAClC,cAAM,OAAA,MAAM,CAAC,cAAM,OAAA,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAQ,EAAC,MAAM,EAAE,KAAK,EAAC,CAAC,CAAC,EAAxD,CAAwD,CAAC;iBACjE,YAAY,CAAC,sBAAsB,CAAC,EADzC,CACyC,CAAC,CAAC;YACpD,EAAE,CAAC,gCAAgC,EAChC,cAAM,OAAA,MAAM,CAAC,cAAM,OAAA,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAQ,EAAC,YAAY,EAAE,MAAM,EAAC,CAAC,CAAC,EAA/D,CAA+D,CAAC;iBACxE,YAAY,CAAC,6BAA6B,CAAC,EADhD,CACgD,CAAC,CAAC;YAC3D,EAAE,CAAC,+BAA+B,EAAE,UAAC,IAAY;gBAC/C,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,SAAS,CAAC,SAAS,EAAE,UAAC,GAAsB;oBACrE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;oBAC3B,MAAM,CAAC,GAAG,CAAC,KAAK,YAAY,KAAK,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBACjD,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;oBACzD,IAAI,EAAE,CAAC;gBACT,CAAC,CAAC,CAAC;gBACH,QAAQ,CAAC,QAAQ,EAAE,CAAC;YACtB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.JsonpCallbackContext\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ddescribe, describe, it} from '@angular/core/testing/src/testing_internal';\n\nimport {JSONP_ERR_NO_CALLBACK, JSONP_ERR_WRONG_METHOD, JSONP_ERR_WRONG_RESPONSE_TYPE, JsonpClientBackend} from '../src/jsonp';\nimport {HttpRequest} from '../src/request';\nimport {HttpErrorResponse, HttpEventType} from '../src/response';\n\nimport {MockDocument} from './jsonp_mock';\n\nfunction runOnlyCallback(home: any, data: Object) {\n  const keys = Object.keys(home);\n  expect(keys.length).toBe(1);\n  const callback = home[keys[0]];\n  delete home[keys[0]];\n  callback(data);\n}\n\nconst SAMPLE_REQ = new HttpRequest<never>('JSONP', '/test');\n\nexport function main() {\n  describe('JsonpClientBackend', () => {\n    let home = {};\n    let document: MockDocument;\n    let backend: JsonpClientBackend;\n    beforeEach(() => {\n      home = {};\n      document = new MockDocument();\n      backend = new JsonpClientBackend(home, document);\n    });\n    it('handles a basic request', (done: DoneFn) => {\n      backend.handle(SAMPLE_REQ).toArray().subscribe(events => {\n        expect(events.map(event => event.type)).toEqual([\n          HttpEventType.Sent,\n          HttpEventType.Response,\n        ]);\n        done();\n      });\n      runOnlyCallback(home, {data: 'This is a test'});\n      document.mockLoad();\n    });\n    it('handles an error response properly', (done: DoneFn) => {\n      const error = new Error('This is a test error');\n      backend.handle(SAMPLE_REQ).toArray().subscribe(undefined, (err: HttpErrorResponse) => {\n        expect(err.status).toBe(0);\n        expect(err.error).toBe(error);\n        done();\n      });\n      document.mockError(error);\n    });\n    describe('throws an error', () => {\n      it('when request method is not JSONP',\n         () => expect(() => backend.handle(SAMPLE_REQ.clone<never>({method: 'GET'})))\n                   .toThrowError(JSONP_ERR_WRONG_METHOD));\n      it('when response type is not json',\n         () => expect(() => backend.handle(SAMPLE_REQ.clone<never>({responseType: 'text'})))\n                   .toThrowError(JSONP_ERR_WRONG_RESPONSE_TYPE));\n      it('when callback is never called', (done: DoneFn) => {\n        backend.handle(SAMPLE_REQ).subscribe(undefined, (err: HttpErrorResponse) => {\n          expect(err.status).toBe(0);\n          expect(err.error instanceof Error).toEqual(true);\n          expect(err.error.message).toEqual(JSONP_ERR_NO_CALLBACK);\n          done();\n        });\n        document.mockLoad();\n      });\n    });\n  });\n}\n"]}