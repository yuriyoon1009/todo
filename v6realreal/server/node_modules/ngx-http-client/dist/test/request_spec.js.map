{"version":3,"file":"request_spec.js","sourceRoot":"","sources":["../../test/request_spec.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ddescribe, describe, it} from '@angular/core/testing/src/testing_internal';\n\nimport {HttpHeaders} from '../src/headers';\nimport {HttpParams} from '../src/params';\nimport {HttpRequest} from '../src/request';\n\nconst TEST_URL = 'http://angular.io';\nconst TEST_STRING = `I'm a body!`;\n\nexport function main() {\n  describe('HttpRequest', () => {\n    describe('constructor', () => {\n      it('initializes url', () => {\n        const req = new HttpRequest('', TEST_URL, null);\n        expect(req.url).toBe(TEST_URL);\n      });\n      it('doesn\\'t require a body for body-less methods', () => {\n        let req = new HttpRequest('GET', TEST_URL);\n        expect(req.method).toBe('GET');\n        expect(req.body).toBeNull();\n        req = new HttpRequest('HEAD', TEST_URL);\n        expect(req.method).toBe('HEAD');\n        expect(req.body).toBeNull();\n        req = new HttpRequest('JSONP', TEST_URL);\n        expect(req.method).toBe('JSONP');\n        expect(req.body).toBeNull();\n        req = new HttpRequest('OPTIONS', TEST_URL);\n        expect(req.method).toBe('OPTIONS');\n        expect(req.body).toBeNull();\n      });\n      it('accepts a string request method', () => {\n        const req = new HttpRequest('TEST', TEST_URL, null);\n        expect(req.method).toBe('TEST');\n      });\n      it('accepts a string body', () => {\n        const req = new HttpRequest('POST', TEST_URL, TEST_STRING);\n        expect(req.body).toBe(TEST_STRING);\n      });\n      it('accepts an object body', () => {\n        const req = new HttpRequest('POST', TEST_URL, {data: TEST_STRING});\n        expect(req.body).toEqual({data: TEST_STRING});\n      });\n      it('creates default headers if not passed', () => {\n        const req = new HttpRequest('GET', TEST_URL);\n        expect(req.headers instanceof HttpHeaders).toBeTruthy();\n      });\n      it('uses the provided headers if passed', () => {\n        const headers = new HttpHeaders();\n        const req = new HttpRequest('GET', TEST_URL, {headers});\n        expect(req.headers).toBe(headers);\n      });\n      it('defaults to Json', () => {\n        const req = new HttpRequest('GET', TEST_URL);\n        expect(req.responseType).toBe('json');\n      });\n    });\n    describe('clone() copies the request', () => {\n      const headers = new HttpHeaders({\n        'Test': 'Test header',\n      });\n      const req = new HttpRequest('POST', TEST_URL, 'test body', {\n        headers,\n        reportProgress: true,\n        responseType: 'text',\n        withCredentials: true,\n      });\n      it('in the base case', () => {\n        const clone = req.clone();\n        expect(clone.method).toBe('POST');\n        expect(clone.responseType).toBe('text');\n        expect(clone.url).toBe(TEST_URL);\n        // Headers should be the same, as the headers are sealed.\n        expect(clone.headers).toBe(headers);\n        expect(clone.headers.get('Test')).toBe('Test header');\n      });\n      it('and updates the url',\n         () => { expect(req.clone({url: '/changed'}).url).toBe('/changed'); });\n      it('and updates the method',\n         () => { expect(req.clone({method: 'PUT'}).method).toBe('PUT'); });\n      it('and updates the body',\n         () => { expect(req.clone({body: 'changed body'}).body).toBe('changed body'); });\n    });\n    describe('content type detection', () => {\n      const baseReq = new HttpRequest('POST', '/test', null);\n      it('handles a null body', () => { expect(baseReq.detectContentTypeHeader()).toBeNull(); });\n      it('doesn\\'t associate a content type with ArrayBuffers', () => {\n        const req = baseReq.clone({body: new ArrayBuffer(4)});\n        expect(req.detectContentTypeHeader()).toBeNull();\n      });\n      it('handles strings as text', () => {\n        const req = baseReq.clone({body: 'hello world'});\n        expect(req.detectContentTypeHeader()).toBe('text/plain');\n      });\n      it('handles arrays as json', () => {\n        const req = baseReq.clone({body: ['a', 'b']});\n        expect(req.detectContentTypeHeader()).toBe('application/json');\n      });\n      it('handles numbers as json', () => {\n        const req = baseReq.clone({body: 314159});\n        expect(req.detectContentTypeHeader()).toBe('application/json');\n      });\n      it('handles objects as json', () => {\n        const req = baseReq.clone({body: {data: 'test data'}});\n        expect(req.detectContentTypeHeader()).toBe('application/json');\n      });\n    });\n    describe('body serialization', () => {\n      const baseReq = new HttpRequest('POST', '/test', null);\n      it('handles a null body', () => { expect(baseReq.serializeBody()).toBeNull(); });\n      it('passes ArrayBuffers through', () => {\n        const body = new ArrayBuffer(4);\n        expect(baseReq.clone({body}).serializeBody()).toBe(body);\n      });\n      it('passes strings through', () => {\n        const body = 'hello world';\n        expect(baseReq.clone({body}).serializeBody()).toBe(body);\n      });\n      it('serializes arrays as json', () => {\n        expect(baseReq.clone({body: ['a', 'b']}).serializeBody()).toBe('[\"a\",\"b\"]');\n      });\n      it('handles numbers as json',\n         () => { expect(baseReq.clone({body: 314159}).serializeBody()).toBe('314159'); });\n      it('handles objects as json', () => {\n        const req = baseReq.clone({body: {data: 'test data'}});\n        expect(req.serializeBody()).toBe('{\"data\":\"test data\"}');\n      });\n      it('serializes parameters as urlencoded', () => {\n        const params = new HttpParams().append('first', 'value').append('second', 'other');\n        const withParams = baseReq.clone({body: params});\n        expect(withParams.serializeBody()).toEqual('first=value&second=other');\n        expect(withParams.detectContentTypeHeader())\n            .toEqual('application/x-www-form-urlencoded;charset=UTF-8');\n      });\n    });\n    describe('parameter handling', () => {\n      const baseReq = new HttpRequest('GET', '/test', null);\n      const params = new HttpParams({fromString: 'test=true'});\n      it('appends parameters to a base URL', () => {\n        const req = baseReq.clone({params});\n        expect(req.urlWithParams).toEqual('/test?test=true');\n      });\n      it('appends parameters to a URL with an empty query string', () => {\n        const req = baseReq.clone({params, url: '/test?'});\n        expect(req.urlWithParams).toEqual('/test?test=true');\n      });\n      it('appends parameters to a URL with a query string', () => {\n        const req = baseReq.clone({params, url: '/test?other=false'});\n        expect(req.urlWithParams).toEqual('/test?other=false&test=true');\n      });\n      it('sets parameters via setParams', () => {\n        const req = baseReq.clone({setParams: {'test': 'false'}});\n        expect(req.urlWithParams).toEqual('/test?test=false');\n      });\n    });\n  });\n}"]}