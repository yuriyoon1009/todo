{"version":3,"file":"xhr_mock.js","sourceRoot":"","sources":["../../test/xhr_mock.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpHeaders} from '../src/headers';\nimport {XhrFactory} from '../src/xhr';\n\nexport class MockXhrFactory implements XhrFactory {\n  mock: MockXMLHttpRequest;\n\n  build(): XMLHttpRequest { return (this.mock = new MockXMLHttpRequest()) as any; }\n}\n\nexport class MockXMLHttpRequestUpload {\n  constructor(private mock: MockXMLHttpRequest) {}\n\n  addEventListener(event: 'progress', handler: Function) {\n    this.mock.addEventListener('uploadProgress', handler);\n  }\n\n  removeEventListener(event: 'progress', handler: Function) {\n    this.mock.removeEventListener('uploadProgress');\n  }\n}\n\nexport class MockXMLHttpRequest {\n  // Set by method calls.\n  body: any;\n  method: string;\n  url: string;\n  mockHeaders: {[key: string]: string} = {};\n  mockAborted: boolean = false;\n\n  // Directly settable interface.\n  withCredentials: boolean = false;\n  responseType: string = 'text';\n\n  // Mocked response interface.\n  response: any|undefined = undefined;\n  responseText: string|undefined = undefined;\n  responseURL: string|null = null;\n  status: number = 0;\n  statusText: string = '';\n  mockResponseHeaders: string = '';\n\n  listeners: {\n    error?: (event: ErrorEvent) => void,\n    load?: () => void,\n    progress?: (event: ProgressEvent) => void,\n    uploadProgress?: (event: ProgressEvent) => void,\n  } = {};\n\n  upload = new MockXMLHttpRequestUpload(this);\n\n  open(method: string, url: string): void {\n    this.method = method;\n    this.url = url;\n  }\n\n  send(body: any): void { this.body = body; }\n\n  addEventListener(event: 'error'|'load'|'progress'|'uploadProgress', handler: Function): void {\n    this.listeners[event] = handler as any;\n  }\n\n  removeEventListener(event: 'error'|'load'|'progress'|'uploadProgress'): void {\n    delete this.listeners[event];\n  }\n\n  setRequestHeader(name: string, value: string): void { this.mockHeaders[name] = value; }\n\n  getAllResponseHeaders(): string { return this.mockResponseHeaders; }\n\n  getResponseHeader(header: string): string|null {\n    return new HttpHeaders(this.mockResponseHeaders).get(header);\n  }\n\n  mockFlush(status: number, statusText: string, body?: string) {\n    if (typeof body === 'string') {\n      this.responseText = body;\n    } else {\n      this.response = body;\n    }\n    this.status = status;\n    this.statusText = statusText;\n    this.mockLoadEvent();\n  }\n\n  mockDownloadProgressEvent(loaded: number, total?: number): void {\n    if (this.listeners.progress) {\n      this.listeners.progress({ lengthComputable: total !== undefined, loaded, total } as any);\n    }\n  }\n\n  mockUploadProgressEvent(loaded: number, total?: number) {\n    if (this.listeners.uploadProgress) {\n      this.listeners.uploadProgress(\n          { lengthComputable: total !== undefined, loaded, total, } as any);\n    }\n  }\n\n  mockLoadEvent(): void {\n    if (this.listeners.load) {\n      this.listeners.load();\n    }\n  }\n\n  mockErrorEvent(error: any): void {\n    if (this.listeners.error) {\n      this.listeners.error(error);\n    }\n  }\n\n  abort() { this.mockAborted = true; }\n}"]}