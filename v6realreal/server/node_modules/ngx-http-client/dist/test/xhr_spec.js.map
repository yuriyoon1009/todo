{"version":3,"file":"xhr_spec.js","sourceRoot":"","sources":["../../test/xhr_spec.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ddescribe, describe, iit, it} from '@angular/core/testing/src/testing_internal';\nimport {Observable} from 'rxjs/Observable';\n\nimport {HttpRequest} from '../src/request';\nimport {HttpDownloadProgressEvent, HttpErrorResponse, HttpEvent, HttpEventType, HttpHeaderResponse, HttpResponse, HttpResponseBase, HttpUploadProgressEvent} from '../src/response';\nimport {HttpXhrBackend} from '../src/xhr';\n\nimport {MockXhrFactory} from './xhr_mock';\n\nfunction trackEvents(obs: Observable<HttpEvent<any>>): HttpEvent<any>[] {\n  const events: HttpEvent<any>[] = [];\n  obs.subscribe(event => events.push(event), err => events.push(err));\n  return events;\n}\n\nconst TEST_POST = new HttpRequest('POST', '/test', 'some body', {\n  responseType: 'text',\n});\n\nexport function main() {\n  describe('XhrBackend', () => {\n    let factory: MockXhrFactory = null !;\n    let backend: HttpXhrBackend = null !;\n    beforeEach(() => {\n      factory = new MockXhrFactory();\n      backend = new HttpXhrBackend(factory);\n    });\n    it('emits status immediately', () => {\n      const events = trackEvents(backend.handle(TEST_POST));\n      expect(events.length).toBe(1);\n      expect(events[0].type).toBe(HttpEventType.Sent);\n    });\n    it('sets method, url, and responseType correctly', () => {\n      backend.handle(TEST_POST).subscribe();\n      expect(factory.mock.method).toBe('POST');\n      expect(factory.mock.responseType).toBe('text');\n      expect(factory.mock.url).toBe('/test');\n    });\n    it('sets outgoing body correctly', () => {\n      backend.handle(TEST_POST).subscribe();\n      expect(factory.mock.body).toBe('some body');\n    });\n    it('sets outgoing headers, including default headers', () => {\n      const post = TEST_POST.clone({\n        setHeaders: {\n          'Test': 'Test header',\n        },\n      });\n      backend.handle(post).subscribe();\n      expect(factory.mock.mockHeaders).toEqual({\n        'Test': 'Test header',\n        'Accept': 'application/json, text/plain, */*',\n        'Content-Type': 'text/plain',\n      });\n    });\n    it('sets outgoing headers, including overriding defaults', () => {\n      const setHeaders = {\n        'Test': 'Test header',\n        'Accept': 'text/html',\n        'Content-Type': 'text/css',\n      };\n      backend.handle(TEST_POST.clone({setHeaders})).subscribe();\n      expect(factory.mock.mockHeaders).toEqual(setHeaders);\n    });\n    it('passes withCredentials through', () => {\n      backend.handle(TEST_POST.clone({withCredentials: true})).subscribe();\n      expect(factory.mock.withCredentials).toBe(true);\n    });\n    it('handles a text response', () => {\n      const events = trackEvents(backend.handle(TEST_POST));\n      factory.mock.mockFlush(200, 'OK', 'some response');\n      expect(events.length).toBe(2);\n      expect(events[1].type).toBe(HttpEventType.Response);\n      expect(events[1] instanceof HttpResponse).toBeTruthy();\n      const res = events[1] as HttpResponse<string>;\n      expect(res.body).toBe('some response');\n      expect(res.status).toBe(200);\n      expect(res.statusText).toBe('OK');\n    });\n    it('handles a json response', () => {\n      const events = trackEvents(backend.handle(TEST_POST.clone({responseType: 'json'})));\n      factory.mock.mockFlush(200, 'OK', JSON.stringify({data: 'some data'}));\n      expect(events.length).toBe(2);\n      const res = events[1] as HttpResponse<{data: string}>;\n      expect(res.body !.data).toBe('some data');\n    });\n    it('handles a json error response', () => {\n      const events = trackEvents(backend.handle(TEST_POST.clone({responseType: 'json'})));\n      factory.mock.mockFlush(500, 'Error', JSON.stringify({data: 'some data'}));\n      expect(events.length).toBe(2);\n      const res = events[1] as any as HttpErrorResponse;\n      expect(res.error !.data).toBe('some data');\n    });\n    it('handles a json string response', () => {\n      const events = trackEvents(backend.handle(TEST_POST.clone({responseType: 'json'})));\n      expect(factory.mock.responseType).toEqual('text');\n      factory.mock.mockFlush(200, 'OK', JSON.stringify('this is a string'));\n      expect(events.length).toBe(2);\n      const res = events[1] as HttpResponse<string>;\n      expect(res.body).toEqual('this is a string');\n    });\n    it('handles a json response with an XSSI prefix', () => {\n      const events = trackEvents(backend.handle(TEST_POST.clone({responseType: 'json'})));\n      factory.mock.mockFlush(200, 'OK', ')]}\\'\\n' + JSON.stringify({data: 'some data'}));\n      expect(events.length).toBe(2);\n      const res = events[1] as HttpResponse<{data: string}>;\n      expect(res.body !.data).toBe('some data');\n    });\n    it('emits unsuccessful responses via the error path', (done: DoneFn) => {\n      backend.handle(TEST_POST).subscribe(undefined, (err: HttpErrorResponse) => {\n        expect(err instanceof HttpErrorResponse).toBe(true);\n        expect(err.error).toBe('this is the error');\n        done();\n      });\n      factory.mock.mockFlush(400, 'Bad Request', 'this is the error');\n    });\n    it('emits real errors via the error path', (done: DoneFn) => {\n      backend.handle(TEST_POST).subscribe(undefined, (err: HttpErrorResponse) => {\n        expect(err instanceof HttpErrorResponse).toBe(true);\n        expect(err.error instanceof Error);\n        done();\n      });\n      factory.mock.mockErrorEvent(new Error('blah'));\n    });\n    describe('progress events', () => {\n      it('are emitted for download progress', (done: DoneFn) => {\n        backend.handle(TEST_POST.clone({reportProgress: true})).toArray().subscribe(events => {\n          expect(events.map(event => event.type)).toEqual([\n            HttpEventType.Sent,\n            HttpEventType.ResponseHeader,\n            HttpEventType.DownloadProgress,\n            HttpEventType.DownloadProgress,\n            HttpEventType.Response,\n          ]);\n          const [progress1, progress2, response] = [\n            events[2] as HttpDownloadProgressEvent, events[3] as HttpDownloadProgressEvent,\n            events[4] as HttpResponse<string>\n          ];\n          expect(progress1.partialText).toBe('down');\n          expect(progress1.loaded).toBe(100);\n          expect(progress1.total).toBe(300);\n          expect(progress2.partialText).toBe('download');\n          expect(progress2.loaded).toBe(200);\n          expect(progress2.total).toBe(300);\n          expect(response.body).toBe('downloaded');\n          done();\n        });\n        factory.mock.responseText = 'down';\n        factory.mock.mockDownloadProgressEvent(100, 300);\n        factory.mock.responseText = 'download';\n        factory.mock.mockDownloadProgressEvent(200, 300);\n        factory.mock.mockFlush(200, 'OK', 'downloaded');\n      });\n      it('are emitted for upload progress', (done: DoneFn) => {\n        backend.handle(TEST_POST.clone({reportProgress: true})).toArray().subscribe(events => {\n          expect(events.map(event => event.type)).toEqual([\n            HttpEventType.Sent,\n            HttpEventType.UploadProgress,\n            HttpEventType.UploadProgress,\n            HttpEventType.Response,\n          ]);\n          const [progress1, progress2] = [\n            events[1] as HttpUploadProgressEvent,\n            events[2] as HttpUploadProgressEvent,\n          ];\n          expect(progress1.loaded).toBe(100);\n          expect(progress1.total).toBe(300);\n          expect(progress2.loaded).toBe(200);\n          expect(progress2.total).toBe(300);\n          done();\n        });\n        factory.mock.mockUploadProgressEvent(100, 300);\n        factory.mock.mockUploadProgressEvent(200, 300);\n        factory.mock.mockFlush(200, 'OK', 'Done');\n      });\n      it('are emitted when both upload and download progress are available', (done: DoneFn) => {\n        backend.handle(TEST_POST.clone({reportProgress: true})).toArray().subscribe(events => {\n          expect(events.map(event => event.type)).toEqual([\n            HttpEventType.Sent,\n            HttpEventType.UploadProgress,\n            HttpEventType.ResponseHeader,\n            HttpEventType.DownloadProgress,\n            HttpEventType.Response,\n          ]);\n          done();\n        });\n        factory.mock.mockUploadProgressEvent(100, 300);\n        factory.mock.mockDownloadProgressEvent(200, 300);\n        factory.mock.mockFlush(200, 'OK', 'Done');\n      });\n      it('are emitted even if length is not computable', (done: DoneFn) => {\n        backend.handle(TEST_POST.clone({reportProgress: true})).toArray().subscribe(events => {\n          expect(events.map(event => event.type)).toEqual([\n            HttpEventType.Sent,\n            HttpEventType.UploadProgress,\n            HttpEventType.ResponseHeader,\n            HttpEventType.DownloadProgress,\n            HttpEventType.Response,\n          ]);\n          done();\n        });\n        factory.mock.mockUploadProgressEvent(100);\n        factory.mock.mockDownloadProgressEvent(200);\n        factory.mock.mockFlush(200, 'OK', 'Done');\n      });\n      it('include ResponseHeader with headers and status', (done: DoneFn) => {\n        backend.handle(TEST_POST.clone({reportProgress: true})).toArray().subscribe(events => {\n          expect(events.map(event => event.type)).toEqual([\n            HttpEventType.Sent,\n            HttpEventType.ResponseHeader,\n            HttpEventType.DownloadProgress,\n            HttpEventType.Response,\n          ]);\n          const partial = events[1] as HttpHeaderResponse;\n          expect(partial.headers.get('Content-Type')).toEqual('text/plain');\n          expect(partial.headers.get('Test')).toEqual('Test header');\n          done();\n        });\n        factory.mock.mockResponseHeaders = 'Test: Test header\\nContent-Type: text/plain\\n';\n        factory.mock.mockDownloadProgressEvent(200);\n        factory.mock.mockFlush(200, 'OK', 'Done');\n      });\n      it('are unsubscribed along with the main request', () => {\n        const sub = backend.handle(TEST_POST.clone({reportProgress: true})).subscribe();\n        expect(factory.mock.listeners.progress).not.toBeUndefined();\n        sub.unsubscribe();\n        expect(factory.mock.listeners.progress).toBeUndefined();\n      });\n      it('do not cause headers to be re-parsed on main response', (done: DoneFn) => {\n        backend.handle(TEST_POST.clone({reportProgress: true})).toArray().subscribe(events => {\n          events\n              .filter(\n                  event => event.type === HttpEventType.Response ||\n                      event.type === HttpEventType.ResponseHeader)\n              .map(event => event as HttpResponseBase)\n              .forEach(event => {\n                expect(event.status).toBe(203);\n                expect(event.headers.get('Test')).toEqual('This is a test');\n              });\n          done();\n        });\n        factory.mock.mockResponseHeaders = 'Test: This is a test\\n';\n        factory.mock.status = 203;\n        factory.mock.mockDownloadProgressEvent(100, 300);\n        factory.mock.mockResponseHeaders = 'Test: should never be read\\n';\n        factory.mock.mockFlush(203, 'OK', 'Testing 1 2 3');\n      });\n    });\n    describe('gets response URL', () => {\n      it('from XHR.responsesURL', (done: DoneFn) => {\n        backend.handle(TEST_POST).toArray().subscribe(events => {\n          expect(events.length).toBe(2);\n          expect(events[1].type).toBe(HttpEventType.Response);\n          const response = events[1] as HttpResponse<string>;\n          expect(response.url).toBe('/response/url');\n          done();\n        });\n        factory.mock.responseURL = '/response/url';\n        factory.mock.mockFlush(200, 'OK', 'Test');\n      });\n      it('from X-Request-URL header if XHR.responseURL is not present', (done: DoneFn) => {\n        backend.handle(TEST_POST).toArray().subscribe(events => {\n          expect(events.length).toBe(2);\n          expect(events[1].type).toBe(HttpEventType.Response);\n          const response = events[1] as HttpResponse<string>;\n          expect(response.url).toBe('/response/url');\n          done();\n        });\n        factory.mock.mockResponseHeaders = 'X-Request-URL: /response/url\\n';\n        factory.mock.mockFlush(200, 'OK', 'Test');\n      });\n      it('falls back on Request.url if neither are available', (done: DoneFn) => {\n        backend.handle(TEST_POST).toArray().subscribe(events => {\n          expect(events.length).toBe(2);\n          expect(events[1].type).toBe(HttpEventType.Response);\n          const response = events[1] as HttpResponse<string>;\n          expect(response.url).toBe('/test');\n          done();\n        });\n        factory.mock.mockFlush(200, 'OK', 'Test');\n      });\n    });\n    describe('corrects for quirks', () => {\n      it('by normalizing 1223 status to 204', (done: DoneFn) => {\n        backend.handle(TEST_POST).toArray().subscribe(events => {\n          expect(events.length).toBe(2);\n          expect(events[1].type).toBe(HttpEventType.Response);\n          const response = events[1] as HttpResponse<string>;\n          expect(response.status).toBe(204);\n          done();\n        });\n        factory.mock.mockFlush(1223, 'IE Special Status', 'Test');\n      });\n      it('by normalizing 0 status to 200 if a body is present', (done: DoneFn) => {\n        backend.handle(TEST_POST).toArray().subscribe(events => {\n          expect(events.length).toBe(2);\n          expect(events[1].type).toBe(HttpEventType.Response);\n          const response = events[1] as HttpResponse<string>;\n          expect(response.status).toBe(200);\n          done();\n        });\n        factory.mock.mockFlush(0, 'CORS 0 status', 'Test');\n      });\n      it('by leaving 0 status as 0 if a body is not present', (done: DoneFn) => {\n        backend.handle(TEST_POST).toArray().subscribe(undefined, (error: HttpErrorResponse) => {\n          expect(error.status).toBe(0);\n          done();\n        });\n        factory.mock.mockFlush(0, 'CORS 0 status');\n      });\n    });\n  });\n}\n"]}