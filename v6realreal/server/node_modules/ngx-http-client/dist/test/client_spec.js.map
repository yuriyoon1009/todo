{"version":3,"file":"client_spec.js","sourceRoot":"","sources":["../../test/client_spec.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport 'rxjs/add/operator/toArray';\nimport 'rxjs/add/operator/toPromise';\n\nimport {ddescribe, describe, iit, it} from '@angular/core/testing/src/testing_internal';\n\nimport {HttpClient} from '../src/client';\nimport {HttpErrorResponse, HttpEventType, HttpResponse} from '../src/response';\nimport {HttpClientTestingBackend} from '../testing/src/backend';\n\nexport function main() {\n  describe('HttpClient', () => {\n    let client: HttpClient = null !;\n    let backend: HttpClientTestingBackend = null !;\n    beforeEach(() => {\n      backend = new HttpClientTestingBackend();\n      client = new HttpClient(backend);\n    });\n    afterEach(() => { backend.verify(); });\n    describe('makes a basic request', () => {\n      it('for JSON data', (done: DoneFn) => {\n        client.get('/test').subscribe(res => {\n          expect((res as any)['data']).toEqual('hello world');\n          done();\n        });\n        backend.expectOne('/test').flush({'data': 'hello world'});\n      });\n      it('for text data', (done: DoneFn) => {\n        client.get('/test', {responseType: 'text'}).subscribe(res => {\n          expect(res).toEqual('hello world');\n          done();\n        });\n        backend.expectOne('/test').flush('hello world');\n      });\n      it('with headers', (done: DoneFn) => {\n        client.get('/test', {headers: {'X-Option': 'true'}}).subscribe(() => done());\n        const req = backend.expectOne('/test');\n        expect(req.request.headers.get('X-Option')).toEqual('true');\n        req.flush({});\n      });\n      it('with params', (done: DoneFn) => {\n        client.get('/test', {params: {'test': 'true'}}).subscribe(() => done());\n        backend.expectOne('/test?test=true').flush({});\n      });\n      it('for an arraybuffer', (done: DoneFn) => {\n        const body = new ArrayBuffer(4);\n        client.get('/test', {responseType: 'arraybuffer'}).subscribe(res => {\n          expect(res).toBe(body);\n          done();\n        });\n        backend.expectOne('/test').flush(body);\n      });\n      if (typeof Blob !== 'undefined') {\n        it('for a blob', (done: DoneFn) => {\n          const body = new Blob([new ArrayBuffer(4)]);\n          client.get('/test', {responseType: 'blob'}).subscribe(res => {\n            expect(res).toBe(body);\n            done();\n          });\n          backend.expectOne('/test').flush(body);\n        });\n      }\n      it('that returns a response', (done: DoneFn) => {\n        const body = {'data': 'hello world'};\n        client.get('/test', {observe: 'response'}).subscribe(res => {\n          expect(res instanceof HttpResponse).toBe(true);\n          expect(res.body).toBe(body);\n          done();\n        });\n        backend.expectOne('/test').flush(body);\n      });\n      it('that returns a stream of events', (done: DoneFn) => {\n        client.get('/test', {observe: 'events'}).toArray().toPromise().then(events => {\n          expect(events.length).toBe(2);\n          let x = HttpResponse;\n          expect(events[0].type).toBe(HttpEventType.Sent);\n          expect(events[1].type).toBe(HttpEventType.Response);\n          expect(events[1] instanceof HttpResponse).toBeTruthy();\n          done();\n        });\n        backend.expectOne('/test').flush({'data': 'hello world'});\n      });\n      it('with progress events enabled', (done: DoneFn) => {\n        client.get('/test', {reportProgress: true}).subscribe(() => done());\n        const req = backend.expectOne('/test');\n        expect(req.request.reportProgress).toEqual(true);\n        req.flush({});\n      });\n    });\n    describe('makes a POST request', () => {\n      it('with text data', (done: DoneFn) => {\n        client.post('/test', 'text body', {observe: 'response', responseType: 'text'})\n            .subscribe(res => {\n              expect(res.ok).toBeTruthy();\n              expect(res.status).toBe(200);\n              done();\n            });\n        backend.expectOne('/test').flush('hello world');\n      });\n      it('with json data', (done: DoneFn) => {\n        const body = {data: 'json body'};\n        client.post('/test', body, {observe: 'response', responseType: 'text'}).subscribe(res => {\n          expect(res.ok).toBeTruthy();\n          expect(res.status).toBe(200);\n          done();\n        });\n        const testReq = backend.expectOne('/test');\n        expect(testReq.request.body).toBe(body);\n        testReq.flush('hello world');\n      });\n      it('with an arraybuffer', (done: DoneFn) => {\n        const body = new ArrayBuffer(4);\n        client.post('/test', body, {observe: 'response', responseType: 'text'}).subscribe(res => {\n          expect(res.ok).toBeTruthy();\n          expect(res.status).toBe(200);\n          done();\n        });\n        const testReq = backend.expectOne('/test');\n        expect(testReq.request.body).toBe(body);\n        testReq.flush('hello world');\n      });\n    });\n    describe('makes a JSONP request', () => {\n      it('with properly set method and callback', (done: DoneFn) => {\n        client.jsonp('/test', 'myCallback').subscribe(() => done());\n        backend.expectOne({method: 'JSONP', url: '/test?myCallback=JSONP_CALLBACK'})\n            .flush('hello world');\n      });\n    });\n    describe('makes a request for an error response', () => {\n      it('with a JSON body', (done: DoneFn) => {\n        client.get('/test').subscribe(() => {}, (res: HttpErrorResponse) => {\n          expect(res.error.data).toEqual('hello world');\n          done();\n        });\n        backend.expectOne('/test').flush(\n            {'data': 'hello world'}, {status: 500, statusText: 'Server error'});\n      });\n    });\n  });\n}\n"]}